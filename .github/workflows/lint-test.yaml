name: Lint and Test Helm Chart

on:
  workflow_call:

jobs:
  lint-test:
    runs-on: ubuntu-24.04
    steps:
      # 1. Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.13.0

      # 3. Set up Python (required by chart-testing tools)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      # 4. Set up chart-testing
      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2

      # 5. Run chart-testing to list changed charts
      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --config ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      # 6. Install k3d
      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      # 7. Create k3d cluster
      - name: Create k3d cluster
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          k3d cluster create mycluster \
            --api-port 6443 \
            -p "80:80@loadbalancer" \
            -p "443:443@loadbalancer" \
            --agents 2

      # 8. Wait for cluster to be ready
      - name: Wait for Kubernetes cluster to be ready
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      # 9. Create a namespace
      - name: Create custom namespace
        run: |
          kubectl create namespace dotcms-dev

      # 10. Run chart-testing to lint charts
      - name: Run chart-testing (lint)
        run: ct lint --config ct.yaml

      # 11. Run chart-testing to install charts
      # - name: Run chart-testing (install)
      #   run: ct install --config ct.yaml --debug

      # 12. Clean up k3d cluster (optional, for CI/CD efficiency)
      - name: Delete k3d cluster
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          k3d cluster delete mycluster


# name: Lint and Test Helm Chart

# on:
#   workflow_call:

# jobs:
#   lint-test:
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Set up Helm
#         uses: azure/setup-helm@v4
#         with:
#           version: v3.13.0

#       # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
#       # yamllint (https://github.com/adrienverge/yamllint) which require Python
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: 3.x

#       - name: Set up chart-testing
#         uses: helm/chart-testing-action@v2

#       - name: Run chart-testing (list-changed)
#         id: list-changed
#         run: |
#           changed=$(ct list-changed --config ct.yaml)
#           if [[ -n "$changed" ]]; then
#             echo "changed=true" >> $GITHUB_OUTPUT
#           fi

#       - name: Run chart-testing (lint)
#         run: ct lint --config ct.yaml

#       - name: Create kind cluster
#         uses: helm/kind-action@v1
#         if: steps.list-changed.outputs.changed == 'true'

#       - name: Install local-path-provisioner
#         run: |
#           kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml
#           kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

#       - name: Create custom namespace
#         run: |
#           kubectl create namespace dotcms-dev        

#       - name: Run chart-testing (install)
#         run: ct install --config ct.yaml --debug