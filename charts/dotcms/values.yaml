app: dotcms
customer_name: dotcms-dev
environment-type: local-dev
cloud_provider: local
host_type: corp  # corp, sh
aws:
  region: us-east-1
  serviceAccount:
    roleArn: ""
  secrets:
    secretsArn: ""
argo:
  enabled: false
  argo_app_path: ""
secrets:
  useSecretsStoreCSI: false
  sync:
    shared:
      elasticsearch:
        type: kubernetes.io/basic-auth
        keys:
          - "username"
          - "password"
      ses:
        type: kubernetes.io/basic-auth
        keys:
          - "username"
          - "password"
      license:
        type: Opaque
        keys:
          - "license"
    env:
      database:
        type: kubernetes.io/basic-auth
        keys:
          - "username"
          - "password"
      dotcms-admin:
        type: kubernetes.io/basic-auth
        keys:
          - "password"
  createSecrets: true
serviceAccount:
  create: false
environments:
  prod:
    enabled: true
    dotcms:
      scaleDownBeforeUpgrade: false
      mapToTopLevelDomain: true
dotcms:
  affinity:
    requireDifferentHosts: false
  telemetry:
    enabled: false
    telemetryClient: DEV
  opensearch:
    protocol: https
    host: external-host
    port: 9200
    endpointUrl: "{{ .Values.dotcms.opensearch.protocol }}://{{ .Values.dotcms.opensearch.host }}:{{ .Values.dotcms.opensearch.port }}"
  ingress:
    tlsSecretName: developer-certificate-secret
    host: ""
    hostSuffix: dotcms.local
    type: nginx
    alb:
      certificateArn: ""
      sslPolicy: ""
      securityGroups: ""
  enabled: true
  repository: dotcms/dotcms
  tag: latest
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 10
  replicas: 1
  resources:
    requests:
      cpu: 0.5
      memory: 5Gi
    limits:
      cpu: 2
      memory: 5Gi
  env_variables: {}
  java_memory: 2
  redisSessions:
    enabled: true
  startupProbe:
    httpGet:
      path: /api/v1/appconfiguration
      port: 8082
    initialDelaySeconds: 300
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 18
    timeoutSeconds: 1
  livenessProbe:
    httpGet:
      path: /api/v1/appconfiguration
      port: 8082
    initialDelaySeconds: 1
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 1
    timeoutSeconds: 10
  readinessProbe:
    httpGet:
      path: /api/v1/appconfiguration
      port: 8082
    initialDelaySeconds: 1
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 1
    timeoutSeconds: 5
  volumes:
    shared:
      access_point: ""
      volume_handle: ""
      create: true
  defaultJavaOpts: "-XX:+PrintFlagsFinal -Djdk.lang.Process.launchMechanism=fork"
  additionalJavaOpts: ""
  javaHeapMax: 2g
  remoteCallSubnetBlacklist: 169.254.169.254/32,127.0.0.1/32,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  # customEnvVars:
  #   TEST_ENV_VAR: test
linkerd:
  enabled: false
opensearch:
  local:
    enabled: true
    image: opensearchproject/opensearch:1
  port: 9200
  protocol: http
  auth:
    type: BASIC
  javaOpts: "-Xmx1G"
database:
  local:
    enabled: true
    image: pgvector/pgvector:pg16
    resources:
      requests:
        cpu: 100m
        memory: 3Gi
      limits:
        cpu: 500m
        memory: 3Gi
  host: db
  port: 5432
  name: dotcms
  ssl_mode: prefer
  base_url: "jdbc:postgresql://{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}?sslmode={{ .Values.database.ssl_mode }}"
redis:
  enabled: true
  local:
    enabled: true
    image: redis:latest
  host: redis.local
  password: MY_SECRET_P4SS
  port: 6379
  sessionHost: redis
  sessionPersistentPolicies: DEFAULT
  sslEnabled: false
mail:
  enabled: false
  local:
    enabled: false
  host: smtp.gmail.com
  port: 587
