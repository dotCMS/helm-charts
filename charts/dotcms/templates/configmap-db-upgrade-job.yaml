{{- if .Values.coreServiceEnabled }}
{{- range $envName := keys $.Values.environments }}
{{- with include "myapp.mergeEnvironment" (mergeOverwrite $ (dict "envName" $envName )) | fromYaml }}
{{- $namespace := .Values.customerName }}
{{- $configMapName := printf "%s-%s-db-upgrade-cm" .Values.customerName .Values.environment }}
{{- $configMapMetadata := printf "%s-%s-upgrade-metadata" .Values.customerName .Values.environment }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $configMapName }}
  namespace: {{ $namespace }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-40"     
data:
  job-db-upgrade.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ include "dotcms.dbUpgradeJobName" . }}
      namespace: {{ $namespace }}
      annotations:
        helm.sh/hook: pre-upgrade,pre-install
        helm.sh/hook-weight: "5"
        helm.sh/hook-delete-policy: before-hook-creation, hook-succeeded
    spec:
      template:
        spec:
          restartPolicy: Never
          serviceAccountName: {{ include "dotcms.serviceaccount" . }}
          initContainers:
            - name: check-upgrade
              image: bitnami/kubectl:1.32.0
              imagePullPolicy: IfNotPresent
              command: ["/bin/bash", "-c"]
              args:
                - |
                  if [ -f /tmp/skip ]; then
                    rm /tmp/skip
                  fi
                  echo "Checking upgrade status from ConfigMap {{ $configMapMetadata }} in namespace {{ $namespace }}..."
                  UPGRADE_REQUIRED=$(kubectl get configmap {{ $configMapMetadata }} -n {{ $namespace }} -o=jsonpath='{.data.upgradeRequired}' 2>/dev/null || echo "false")
                  echo "Upgrade required value: $UPGRADE_REQUIRED"
                  if [ "$UPGRADE_REQUIRED" != "true" ]; then
                    echo "Upgrade not required. Marking skip..."
                    echo "skip" > /tmp/skip
                  else
                    echo "Upgrade required. Proceeding..."
                    while [[ $(kubectl get pod -l app=db -n dcolina -o jsonpath='{.items[0].status.containerStatuses[0].ready}') != "true" ]]; do
                      echo "DB is not ready. Waiting..."
                      sleep 5
                    done                    
                  fi            
              volumeMounts:
                - name: shared-skip
                  mountPath: /tmp
          containers:
            - name: dotcms-upgrade      
              {{- include "dotcms.container.spec" (merge (dict "IsUpgradeJob" true "EnableProbes" false "ShutdownOnStartupValue" true) .) | nindent 14 }}
              command: ["/bin/bash", "-c"]
              args:
                - |
                  if [ -f /tmp/skip ]; then
                    echo "Upgrade not required. Skipping container execution."
                  else
                    echo "Upgrade required. Launching original entrypoint..."
                    echo "env DOT_SHUTDOWN_ON_STARTUP=$DOT_SHUTDOWN_ON_STARTUP"
                    exec /srv/entrypoint.sh dotcms
                  fi
                  exit 0
          volumes:
            - name: shared-skip
              emptyDir: {}      
            - name: dotcms-shared
              persistentVolumeClaim:
                claimName: {{ include "dotcms.pvc.env.name" . }}
            {{- if .Values.secrets.useSecretsStoreCSI }}
            - name: {{ include "dotcms.secret.provider.className" . }}
              csi:
                driver: secrets-store.csi.k8s.io
                readOnly: true
                volumeAttributes:
                  secretProviderClass: {{ include "dotcms.secret.provider.className" . }}
            {{- end }}
          serviceAccountName: {{ include "dotcms.serviceaccount" . }}

{{- end }}
{{- end }}
{{- end }}
