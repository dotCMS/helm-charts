{{- if .Values.coreServiceEnabled }}
{{- range $envName := keys $.Values.environments }}
{{- with include "myapp.mergeEnvironment" ( mergeOverwrite $ (dict "envName" $envName )) | fromYaml }}
{{- $fullName := include "dotcms.env.fullName" . }}
{{- $namespace := .Values.customerName }}
{{- $configMapName := printf "%s-%s-upgrade-metadata" .Values.customerName .Values.environment }}
{{- $backupRestoreJob := include "dotcms.backupRestoreJobName" . }}
{{- $configMapBackupRestore := printf "%s-%s-backup-restore-cm" .Values.customerName .Values.environment }}
{{- $dbUpgradeJob := include "dotcms.dbUpgradeJobName" . }}
{{- $configMapDbUpgrade := printf "%s-%s-db-upgrade-cm" .Values.customerName .Values.environment }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "dotcms.orchestratorJobName" . }}
  namespace: {{ .Values.customerName }}
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
spec:
  ttlSecondsAfterFinished: 7200
  template:
    spec:
      serviceAccountName: {{ include "dotcms.serviceaccount" . }}
      containers:
        - name: kubectl
          image: bitnami/kubectl:1.32.0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              echo "Detecting Helm Action..."
              RELEASE_NAME="{{ .Release.Name }}"
              REVISION_COUNT=$(kubectl get secrets -n {{ $namespace }} -o name | grep "sh.helm.release.v1.$RELEASE_NAME" | wc -l)

              if [[ "$REVISION_COUNT" -eq 1 ]]; then
                echo "This is a fresh installation (helm install)."
                HELM_ACTION="install"
              else
                echo "This is an upgrade (helm upgrade)."
                HELM_ACTION="upgrade"
              fi              
              
              echo "Detecting Backup/Restore operation..."
              OPERATION="{{ .Values.operation }}"
              if [[ "$OPERATION" == "none" ]]; then
                echo "No operation specified. Skipping Backup/Restore."
                BACKUP_RESTORE_ENABLED="false"
              elif [[ "$OPERATION" == "backup" && "$HELM_ACTION" == "upgrade" ]]; then
                echo "Backup operation detected during an upgrade. Allowing execution."
                BACKUP_RESTORE_ENABLED="true"
              elif [[ "$OPERATION" == "restore" ]]; then
                echo "Restore operation detected. Allowing execution."
                BACKUP_RESTORE_ENABLED="true"
              else
                echo "Backup operation is not allowed during an installation process. Skipping..."
                BACKUP_RESTORE_ENABLED="false"
              fi

              echo "Ensuring ConfigMap for upgrade tracking and metadata exists..."
              CONFIGMAP_NAME="{{ $configMapName }}"

              if kubectl get configmap $CONFIGMAP_NAME -n {{ $namespace }} >/dev/null 2>&1; then
                PREV_VERSION=$(kubectl get configmap $CONFIGMAP_NAME -o=jsonpath='{.data.configVersion}' -n {{ $namespace }} 2>/dev/null || echo "")
              else
                PREV_VERSION=""
              fi

              CURR_VERSION="{{ .Values.configVersion }}"
              echo "Current Version: $CURR_VERSION, Previous Version: $PREV_VERSION"

              if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
                echo "Version changed. Upgrade required."
                UPGRADE_REQUIRED="true"
              else
                echo "No version change detected. Upgrade not required."
                UPGRADE_REQUIRED="false"
              fi
              
              kubectl create configmap $CONFIGMAP_NAME \
                --namespace {{ $namespace }} \
                --from-literal=upgradeRequired="$UPGRADE_REQUIRED" \
                --from-literal=backupRestoreEnabled="$BACKUP_RESTORE_ENABLED" \
                --from-literal=configVersion="$CURR_VERSION" \
                --from-literal=replicas="{{ .Values.replicas }}" \
                --from-literal=image="{{ include "dotcms.image" . }}" \
                --from-literal=startTime="$(date)" \
                --from-literal=environmentName="{{ $envName }}" \
                --from-literal=kubernetesVersion="$(kubectl version --client | grep 'Client Version' | awk '{print $3}')" \
                --dry-run=client -o yaml | kubectl apply -f -

              echo "ConfigMap $CONFIGMAP_NAME created successfully."              
                         
              echo "Checking if scale down is needed..."
              if [[ "$HELM_ACTION" = "install" ]]; then
                echo "This is a fresh installation. Skipping scale down..."
              elif [[ "{{ .Values.scaleDownBeforeUpgrade }}" = "true" || "$UPGRADE_REQUIRED" = "true" || "$BACKUP_RESTORE_ENABLED" = "true" ]]; then
                echo "Scaling down dotCMS statefulset for {{ $envName }}..."
                kubectl scale statefulset {{ $fullName }} --replicas=0 --namespace {{ $namespace }}
                kubectl rollout status statefulset {{ $fullName }} --namespace {{ $namespace }}
              else
                echo "Scale down not enabled for {{ $envName }}. Skipping..."
              fi

              if [[ "$BACKUP_RESTORE_ENABLED" = "true" ]]; then
                echo "Starting Backup/Restore Job."
                if [ -f /tmp/job-backup-restore/job-backup-restore.yaml ]; then
                  cat /tmp/job-backup-restore/job-backup-restore.yaml
                  kubectl apply -f /tmp/job-backup-restore/job-backup-restore.yaml
                  kubectl wait --for=condition=complete job/{{ $backupRestoreJob }} --timeout=300s
                else
                  echo "ERROR: Job YAML not found in ConfigMap!"
                  exit 1
                fi             
              fi

              echo "Checking if DB Upgrade is needed..."
              if [[ "$UPGRADE_REQUIRED" = "true" ]]; then
                echo "Starting DB Upgrade Job."
                if [ -f /tmp/job-db-upgrade/job-db-upgrade.yaml ]; then
                  cat /tmp/job-db-upgrade/job-db-upgrade.yaml
                  kubectl apply -f /tmp/job-db-upgrade/job-db-upgrade.yaml
                  kubectl wait --for=condition=complete job/{{ $dbUpgradeJob }} --timeout=300s
                else
                  echo "ERROR: Job YAML not found in ConfigMap!"
                  exit 1
                fi
              else
                echo "No DB Upgrade required."
              fi

              echo "Checking if scale up is needed..."
              if [[ "$HELM_ACTION" = "install" ]]; then
                echo "This is a fresh installation. Skipping scale up..."
              elif [[ "{{ .Values.scaleDownBeforeUpgrade }}" = "true" || "$UPGRADE_REQUIRED" = "true" || "$BACKUP_RESTORE_ENABLED" = "true" ]]; then
                echo "Scaling up dotCMS statefulset for {{ $envName }}..."
                kubectl scale statefulset {{ $fullName }} --replicas={{ .Values.replicas }} --namespace {{ $namespace }}
                kubectl rollout status statefulset {{ $fullName }} --namespace {{ $namespace }}
              else
                echo "Scale up not enabled for {{ $envName }}. Skipping..."
              fi
          volumeMounts:
            - name: job-backup-restore
              mountPath: /tmp/job-backup-restore
          volumeMounts:
            - name: job-db-upgrade
              mountPath: /tmp/job-db-upgrade
      volumes:
        - name: job-backup-restore
          configMap:
            name: {{ $configMapBackupRestore }}
        - name: job-db-upgrade
          configMap:
            name: {{ $configMapDbUpgrade }}            
      restartPolicy: Never
{{- end }}
{{- end }}
{{- end }}
