# templates/hooks/pre-upgrade-scale.yaml
{{- if .Values.coreServiceEnabled }}
{{- range $envName := keys $.Values.environments }}
{{- with include "myapp.mergeEnvironment" ( mergeOverwrite $ (dict "envName" $envName )) | fromYaml }}
{{- $fullName := include "dotcms.env.fullName" . }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "dotcms.preUpgradeJobName" . }}
  namespace: {{ .Values.customerName }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  ttlSecondsAfterFinished: 7200
  template:
    spec:
      serviceAccountName: {{ include "dotcms.serviceaccount" . }}
      containers:
        - name: kubectl
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              if [ "{{ .Values.scaleDownBeforeUpgrade }}" = "true" ]; then
                echo "Scaling down dotCMS statefulset for {{ $envName }}..."

                # Creating ConfigMap with additional information
                kubectl create configmap {{ .Values.customerName }}-{{ $envName }}-scale-data \
                  --namespace {{ .Values.customerName }} \
                  --from-literal=replicas="{{ .Values.replicas }}" \
                  --from-literal=imageVersion="{{ .Values.tag }}" \
                  --from-literal=startTime="$(date)" \
                  --from-literal=environmentName="{{ $envName }}" \
                  --from-literal=kubernetesVersion="$(kubectl version --short | grep Server | awk '{print $3}')"

                echo "Capturing StatefulSet status..."
                kubectl get statefulset {{ $fullName }} -n {{ .Values.customerName }} -o yaml > /tmp/statefulset-status.yaml

                echo "Scaling down statefulset {{ $fullName }} to 0 replicas..."
                kubectl scale statefulset {{ $fullName }} --replicas=0 --namespace {{ .Values.customerName }}
                kubectl rollout status statefulset {{ $fullName }} --namespace {{ .Values.customerName }}
              else
                echo "Scale down not enabled for {{ $envName }}. Skipping..."
              fi
      restartPolicy: Never
{{- end }}
{{- end }}
{{- end }}
