{{- if .Values.coreServiceEnabled }}
{{- range $envName := keys $.Values.environments }}
{{- with include "myapp.mergeEnvironment" ( mergeOverwrite $ (dict "envName" $envName )) | fromYaml }}
{{- $fullName := include "dotcms.env.fullName" . }}
{{- $dbName := include "dotcms.db.name" . }}
{{- $baseUrl := printf "jdbc:postgresql://%s:%v/%s?ssl.mode=prefer" .Values.database.host ( int .Values.database.port ) $dbName  }}
{{- $namespace := .Values.customerName }}
{{- $licenseSecretName := include "dotcms.secret.shared.name" (dict "Values" .Values "secretName" "license") }}
{{- $licenseSecretExists := ne (lookup "v1" "Secret" $namespace $licenseSecretName) nil }}
{{- $useLicense := default (or $licenseSecretExists .Values.license) .Values.useLicense }}
{{- $configMapName := printf "%s-%s-upgrade-metadata" .Values.customerName .Values.environment }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "dotcms.dbUpgradeJobName" . }}
  namespace: {{ $namespace }}
  annotations:
    helm.sh/hook: pre-upgrade,pre-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "dotcms.serviceaccount" . }}
      initContainers:
        - name: check-upgrade
          image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              if [ -f /tmp/skip ]; then
                rm /tmp/skip
              fi
              echo "Checking upgrade status from ConfigMap {{ $configMapName }} in namespace {{ $namespace }}..."
              UPGRADE_REQUIRED=$(kubectl get configmap {{ $configMapName }} -n {{ $namespace }} -o=jsonpath='{.data.upgradeRequired}' 2>/dev/null || echo "false")
              echo "Upgrade required value: $UPGRADE_REQUIRED"
              if [ "$UPGRADE_REQUIRED" != "true" ]; then
                echo "Upgrade not required. Marking skip..."
                echo "skip" > /tmp/skip
              fi
          volumeMounts:
            - name: shared-skip
              mountPath: /tmp
      containers:
        - name: dotcms-upgrade
          command: ["/bin/sh", "-c"]
          args:
            - |
              if [ -f /tmp/skip ]; then
                echo "Upgrade not required. Skipping container execution."
              else
                echo "Upgrade required. Launching original entrypoint..."
                echo "env DOT_SHUTDOWN_ON_STARTUP=$DOT_SHUTDOWN_ON_STARTUP"
                exec /srv/entrypoint.sh dotcms
              fi
              exit 0       
          {{- include "dotcms.container.spec" (merge (dict "IsUpgradeJob" "true" "EnableProbes" "false" "ShutdownOnStartupValue" "true") .) | nindent 10 }}
      volumes:
        - name: dotcms-shared
          persistentVolumeClaim:
            claimName: {{ include "dotcms.pvc.env.name" . }}
        - name: shared-skip
          emptyDir: {}
        {{- if .Values.secrets.useSecretsStoreCSI }}
        - name: {{ include "dotcms.secret.provider.className" .  }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "dotcms.secret.provider.className" .  }}
        {{- end }}
       
{{- end }}
{{- end }}
{{- end }}
